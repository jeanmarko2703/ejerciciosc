{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <string>\
#include <vector>\
using namespace std;\
//#######################\
class PuntoEspacial\
\{\
public:\
	PuntoEspacial(double x, double y, double z)\{\
	    this->x = x;\
	    this->y = y;\
	    this->z = z;\
    \}\
    PuntoEspacial()\{\}\
	~PuntoEspacial()\{\}\
	virtual void display()\{\
	    cout << this->x <<"-" << this->y <<"-"<< this->z << endl;\
	\}\
	void Set_x(double x)\{this->x=x;\}\
	void Set_y(double y)\{this->y=y;\}\
	void Set_z(double z)\{this->z=z;\}\
	double Get_x()\{return x;\}\
	double Get_y()\{return y;\}\
	double Get_z()\{return z;\}\
\
protected:\
	double x;\
	double y;\
	double z;\
\};\
//#######################\
class PuntoColoreado : public PuntoEspacial\
\{\
public:\
	PuntoColoreado(double x, double y, double z, string Color):PuntoEspacial(x,y,z)\{\
	    this->color = Color;\
	\}\
	PuntoColoreado()\{\}\
	~PuntoColoreado()\{\}\
	void Set_Color(string Color)\{ this->color = Color; \}\
	void display()\{\
	    cout << this->x <<"-" << this->y <<"-"<< this->z <<"-"<< this->color << endl;\
    \}\
\
private:\
	string color;\
\};\
//#######################\
class AdminPuntos\
\{\
public:\
	AdminPuntos(int tamanio)\{\
        arrPuntoEspacial = new PuntoEspacial*[tamanio];\
        this->tamanio = tamanio;\
        this->cantidad = 0;\
        for (int i = 0; i < cantidad; ++i)\
        \{\
            arrPuntoEspacial[i] = new PuntoEspacial();\
        \}\
	\}\
	~AdminPuntos()\{\}\
	bool insertar(PuntoEspacial* nuevo)\{\
	    if(cantidad<tamanio-1)\{\
	        //Insertamos dentro de un espacio vac\'edo:\
	        for (int i = 0; i < cantidad; i++) \{\
	            if(arrPuntoEspacial[i]==nuevo)\{\
	                return false;\
	            \}\
	        \}\
	        arrPuntoEspacial[cantidad] = nuevo;\
	        cantidad++;\
	        return true;\
	    \}\
	    return false;\
	\}\
	int buscarPosi(PuntoEspacial* buscado)\{\
	    for (int i = 0; i < cantidad; i++) \{\
	            if(arrPuntoEspacial[i]==buscado)\{\
	                return i;\
	            \}\
	    \}\
	    return -1;\
	\}\
	PuntoEspacial* leer(int posi)\{\
	    if(posi<tamanio)\{\
	        return arrPuntoEspacial[posi];\
	    \}\
	    return nullptr;\
	\}\
	void OrdenarZ()\{\
	    for (int i = 0; i < cantidad; i++) \{\
	        for (int j = i; j < cantidad; j++) \{\
	            if(arrPuntoEspacial[i]->Get_z()<=arrPuntoEspacial[j]->Get_z())\{\
	                PuntoEspacial* aux = arrPuntoEspacial[i];\
	                arrPuntoEspacial[i]=arrPuntoEspacial[j];\
	                arrPuntoEspacial[j] = aux;\
                \
	            \}\
	        \}\
	    \}\
	\}\
	bool eliminar(PuntoEspacial* borrado)\{\
	    int pos = this->buscarPosi(borrado);\
	    if(pos==-1) return false;\
	    //proceso del eliminar:\
	    delete arrPuntoEspacial[pos];\
	    arrPuntoEspacial[pos] = nullptr;\
	    //se mueven los elementos para insertar al final:\
	    for (int i = pos-1; i < cantidad-1; i++) \{\
	        PuntoEspacial* aux = arrPuntoEspacial[i];\
	        arrPuntoEspacial[i] = arrPuntoEspacial[i+1];\
	        arrPuntoEspacial[i+1] = aux;\
	    \}\
	    cantidad--;\
	    return true;\
	\}\
	void eliminarZ(int z)\{\
	    for (int i = 0; i < cantidad; i++) \{\
	        if(arrPuntoEspacial[i]->Get_z()==z)\{\
	            this->eliminar(this->leer(i));\
	        \}\
	    \}\
	\}\
\
protected:\
	PuntoEspacial** arrPuntoEspacial;\
	int tamanio;\
	int cantidad;\
\};\
//#######################\
class MultiAdmin : public AdminPuntos\
\{\
public:\
	MultiAdmin(int tamanio):AdminPuntos(tamanio)\{\}\
	~MultiAdmin()\{\}\
	void ImprimirTodos()\{\
	    for (int i = 0; i < cantidad; i++) \{\
	        if(dynamic_cast<PuntoColoreado*>(arrPuntoEspacial[i])!=nullptr)\
	            ((PuntoColoreado*)arrPuntoEspacial[i])->display();\
	        else\
	            arrPuntoEspacial[i]->display();\
	    \}\
	\}\
	void eliminarX(int x)\{\
	    for (int i = 0; i < cantidad; i++) \{\
	        if(arrPuntoEspacial[i]->Get_x()==x)\{\
	            AdminPuntos::eliminar(this->leer(i));\
	        \}\
	    \}\
	\}\
	bool insertar(PuntoColoreado nuevo)\{\
	    return AdminPuntos::insertar(&nuevo);\
	\}\
	bool insertar(PuntoEspacial* nuevo)\{\
	    return AdminPuntos::insertar(nuevo);\
	\}\
	int buscarPosi(PuntoColoreado buscado)\{\
	    return AdminPuntos::buscarPosi(&buscado);\
	\}\
	int buscarPosi(PuntoEspacial* buscado)\{\
	    return AdminPuntos::buscarPosi(buscado);\
	\}\
	bool eliminar(PuntoColoreado borrado)\{\
	    return AdminPuntos::eliminar(&borrado);\
	\}\
	bool eliminar(PuntoEspacial* borrado)\{\
	    return AdminPuntos::eliminar(borrado);\
	\}\
\};\
\
int main()\
\{\
    MultiAdmin aux = MultiAdmin(10);\
    PuntoEspacial* puntespa = new PuntoEspacial(1,1,1);\
    PuntoEspacial* puntespb = new PuntoEspacial(1,3,1);\
    PuntoColoreado* puntcola = new PuntoColoreado(1,2,1,"b");\
    PuntoColoreado* puntcolb = new PuntoColoreado(1,1,1,"a");\
    \
    aux.insertar(puntespa);\
    // se intenta insertar un repetido \
    aux.insertar(puntespa);//->No lo inserta\
    aux.insertar(puntespb);\
    aux.insertar(puntcola);\
    aux.insertar(puntcolb);\
    aux.ImprimirTodos();\
    cout<<"-----------------------------------"<<endl;\
    cout<<"buscamos la posicion del primer insertado: "<<endl;\
    cout<<aux.buscarPosi(puntespa)<<endl;\
    cout<<"eliminamos el primer elemento:"<<endl;\
    aux.eliminar(puntespa);\
    aux.ImprimirTodos();\
    cout<<"buscamos la posicion de un elemento que no existe:"<<endl;\
    cout<<aux.buscarPosi(puntespa)<<endl;\
    \
    cout<<"buscamos la posicion del nuevo primer elemento: "<<endl;\
    cout<<aux.buscarPosi(puntespb)<<endl;\
    cout<<"eliminamos el elemento:"<<endl;\
    aux.eliminar(puntespb);\
    aux.ImprimirTodos();\
    cout<<"buscamos la posicion del elemento eliminado:"<<endl;\
    cout<<aux.buscarPosi(puntespb)<<endl;\
    return 0;\
\}\
\
}